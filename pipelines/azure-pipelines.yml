# Azure DevOps Pipeline for Claim Status API
# Builds, scans, pushes Docker image, and deploys Bicep infra with full parameterization

trigger:
  branches:
    include:
      - main

variables:
  # Set these in the Azure DevOps pipeline UI as pipeline variables or variable groups for security
  AZURE_SUBSCRIPTION: '<your-azure-subscription-id>'
  RESOURCE_GROUP: '<your-resource-group>'
  AZD_ENV_NAME: 'dev' # or from pipeline variable
  ACR_NAME: '' # Will be set after infra deploy
  IMAGE_NAME: 'claimstatusapi'
  IMAGE_TAG: '$(Build.BuildId)'
  APIM_PUBLISHER_EMAIL: 'admin@contoso.com'
  APIM_PUBLISHER_NAME: 'Contoso'

stages:
- stage: BuildAndPush
  displayName: Build and Push Docker Image
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: AzureCLI@2
      displayName: 'Login to Azure'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az --version
    - task: AzureCLI@2
      displayName: 'Deploy Infra (Bicep)'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create \
            --resource-group $(RESOURCE_GROUP) \
            --template-file iac/main.bicep \
            --parameters \
              azdEnvName=$(AZD_ENV_NAME) \
              claimStatusApiImage='dummy' \
              claimStatusApiPort=80 \
              logAnalyticsRetention=30 \
              apimPublisherEmail=$(APIM_PUBLISHER_EMAIL) \
              apimPublisherName=$(APIM_PUBLISHER_NAME)
          # Extract ACR name from outputs
          ACR_LOGIN_SERVER=$(az deployment group show --resource-group $(RESOURCE_GROUP) --name $(AZD_ENV_NAME) --query "properties.outputs.containerRegistry.value" -o tsv)
          echo "##vso[task.setvariable variable=ACR_LOGIN_SERVER]$ACR_LOGIN_SERVER"
          export ACR_NAME=$(echo $ACR_LOGIN_SERVER | cut -d'.' -f1)
          echo "##vso[task.setvariable variable=ACR_NAME]$ACR_NAME"
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: build
        Dockerfile: src/ClaimStatusApi/Dockerfile
        tags: $(IMAGE_TAG)
        buildContext: .
        repository: $(IMAGE_NAME)
    - task: Docker@2
      displayName: 'Push Docker Image to ACR'
      inputs:
        command: push
        repository: $(IMAGE_NAME)
        tags: $(IMAGE_TAG)
        containerRegistry: $(ACR_NAME)
    - task: AzureCLI@2
      displayName: 'Update Infra with Real Image'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create \
            --resource-group $(RESOURCE_GROUP) \
            --template-file iac/main.bicep \
            --parameters \
              azdEnvName=$(AZD_ENV_NAME) \
              claimStatusApiImage=$(ACR_LOGIN_SERVER)/$(IMAGE_NAME):$(IMAGE_TAG) \
              claimStatusApiPort=80 \
              logAnalyticsRetention=30 \
              apimPublisherEmail=$(APIM_PUBLISHER_EMAIL) \
              apimPublisherName=$(APIM_PUBLISHER_NAME)

- stage: SecurityScan
  displayName: Security Scan and Gate
  dependsOn: BuildAndPush
  jobs:
  - job: Scan
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - script: |
        echo "Scanning image for vulnerabilities..."
        # Defender for Cloud will auto-scan images in ACR
        # Optionally, add Trivy or other scanner here
      displayName: 'Run Container Image Scan'
    - task: AzureCLI@2
      displayName: 'Check Defender for Cloud Findings'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # Example: fail if critical/high vulnerabilities found (pseudo)
          # Replace with actual Defender for Cloud API or CLI checks
          echo "##vso[task.complete result=SucceededWithIssues;]Scan complete. Review Defender for Cloud findings."

- stage: Deploy
  displayName: Deploy to ACA and APIM
  dependsOn: SecurityScan
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: AzureCLI@2
      displayName: 'Deploy Infra (Final)'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group create \
            --resource-group $(RESOURCE_GROUP) \
            --template-file iac/main.bicep \
            --parameters \
              azdEnvName=$(AZD_ENV_NAME) \
              claimStatusApiImage=$(ACR_LOGIN_SERVER)/$(IMAGE_NAME):$(IMAGE_TAG) \
              claimStatusApiPort=80 \
              logAnalyticsRetention=30 \
              apimPublisherEmail=$(APIM_PUBLISHER_EMAIL) \
              apimPublisherName=$(APIM_PUBLISHER_NAME)

# Add additional steps for APIM policy/configuration and observability as needed.
# Ensure all secrets/credentials are stored securely in Azure DevOps variable groups or Key Vault.
